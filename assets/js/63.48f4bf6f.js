(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{470:function(s,a,e){"use strict";e.r(a);var n=e(20),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"前端的构建部署流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端的构建部署流程"}},[s._v("#")]),s._v(" 前端的构建部署流程")]),s._v(" "),e("p",[s._v("一般部署一个前端应用，普遍的流程就是先运行单元测试，结束以后打包前端应用，将对应的 dist 文件夹给放到 web 服务器上，一般使用 nginx 来作为静态服务器。这个时候访问对应的 IP 就能看到项目了。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72f6866017ab446a960924f17d905c95~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image"}})]),s._v(" "),e("h3",{attrs:{id:"前端项目中如何使用docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端项目中如何使用docker"}},[s._v("#")]),s._v(" 前端项目中如何使用Docker")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ac46e2c3cb44b27a304267ce811d38c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image"}})]),s._v(" "),e("p",[s._v("首先下载 Docker，可以去官网中下载，找到对应的操作系统版本下载即可。这里需要注意 windows 系统下，安装 Docker 还需要开启 BIOS 中的配置，因为安装不是本篇的主要内容，这里就不在细说了。一般安装好以后，Docker 就是一个普通的应用，双击打开，可以看到界面是这样的")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f2c4b94b99a441e85cae7b2e3c27063~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image"}})]),s._v(" "),e("p",[s._v("这样就可以开始去定制项目的镜像了。")]),s._v(" "),e("h4",{attrs:{id:"step-1-新建-dockerfile-配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-新建-dockerfile-配置文件"}},[s._v("#")]),s._v(" STEP 1 新建 Dockerfile 配置文件")]),s._v(" "),e("p",[s._v("在项目的根目录下面新建一个 Dockerfile 文件，内容如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('# 第一阶段\nFROM node:16-buster-slim as builder\n\nLABEL description="A demo Dockerfile for build Docsify."\n\nCOPY . /var/web/\n\nRUN set -x \\\n  && cd /var/web \\\n  && npm install \\\n  && npm run build\n\n# 第二阶段\nFROM nginx:1.23.1-alpine as prod\n\nEXPOSE 80\nCOPY --from=0 /var/web/docs /usr/share/nginx/html\nCMD [ "nginx", "-g", "daemon off;" ]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[e("strong",[s._v("FROM")]),s._v("指令可以理解为拉取依赖，对于上面的配置来说，就是我们的项目依赖于 NodeJS 环境，因此需要首先拉取 NodeJS 的镜像，从哪里拉取呢？这就要提到上面说到的仓库了，默认的拉取就是从 docker 官方的 Docker hub上拉取对应的镜像，“：”后面表示该镜像的标签，所谓标签其实就是给镜像的不同版本起了一个名字。")]),s._v(" "),e("p",[s._v("第二行的"),e("strong",[s._v("LABEL")]),s._v("指令不对镜像的构建产生作用，只是一个记录信息的指令，按照 key、value 的格式，可以用来记录诸如作者、版本等元数据信息，类比到前端的话，就是和meta标签的作用类似。")]),s._v(" "),e("p",[e("strong",[s._v("COPY")]),s._v("指令根据字面就可以知道，这是一个复制文件到指定目录的指令，可以有多个源路径，以空格分开，目的路径只能存在一个，并且源路径也可以是类似 glob 匹配路径的格式，注意这个匹配模式是遵循 go filespath match 规则的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("COPY . /var/web/ # 复制当前目录到/var/web/下面\nCOPY ./src/pages/ ./src/routes / # 复制src/pages和src/routes下面的文件夹及文件到根目录下面\nCOPY ./src/pages/* /var/www/ # 复制src/pages下面的所有文件到/var/www/下面，如果pages下面还存在目录。则会复制该目录下的文件，而不是文件夹\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("RUN")]),s._v(" 指令则是执行 linux 命令，可以使用 && 连接多个命令，换行的时候需要添加转移符号\\。")]),s._v(" "),e("p",[s._v("在 Dockerfile 中，每一行的指令都可以理解为一个单独的 layer，因此指令之间都是独立存在的，也就是下面这样的语句其实是无效的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("RUN cd ./src\n\nCOPY docs /var/web\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("此时如果构建镜像的话，就会提示找不到docs目录，原因就是上面所说的 Dockerfile 中的每一级的指令都是独立的，虽然第一行是 cd src 了，但是到了 COPY 指令，实际还是在根目录下，根目录下面并没有docs的文件夹，因此才会报错了。\n这个时候可以使用 "),e("strong",[s._v("WORKDIR")]),s._v(" 指令，指定接下来的所有指令的基础路径。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("WORKDIR ./src\n\n# 下面的所有指令都是基于src的文件夹去执行的\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("紧接着下面又是一个"),e("strong",[s._v("FROM")]),s._v("指令，这里就要说到 docker 的一个多阶段构建的一个功能。所谓多阶段，就是把构建流程分为了多个阶段，上面的配置文件中，第一阶段就是生成目标文件夹，也就是打包以后的文件，第二阶段就是把生成好的文件放到 nginx 服务器中。所以可以看到第二阶段，也是以 "),e("strong",[s._v("FROM")]),s._v(" 指令开头，这次是依赖了 nginx 的镜像，表示这次需要在 nginx 的环境下运行。")]),s._v(" "),e("p",[s._v("可以看到"),e("strong",[s._v("FROM")]),s._v("指令最后有一个as xxx这种形式的声明，它表示每一阶段构建的名称，利用这个名称，可以只构建某一阶段的镜像：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("docker build --target builder -t docify/blog "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着"),e("strong",[s._v("EXPOSE")]),s._v("指令暴露了80端口，注意这里只是表明了暴露的端口是多少，并不是设置了端口，因为实际的端口实际是容器中 nginx 端口。该指令只是起到了一个说明的作用。")]),s._v(" "),e("p",[e("strong",[s._v("COPY")]),s._v("指令上面已经说过了，区别就在于这里多了一个"),e("strong",[s._v("form=0")]),s._v("，这表示从第0阶段生成的结果中拿到 install 好的文件去拷贝到 nginx 的目录下。")]),s._v(" "),e("p",[s._v("最后的"),e("strong",[s._v("CMD")]),s._v("指令，则是相当于打开了 CMD 的终端，然后输入对应的命令。")]),s._v(" "),e("p",[s._v("至此 Dockerfile 的配置文件常用的指令就讲完了，接下来就可以构建镜像了。")]),s._v(" "),e("h4",{attrs:{id:"step-2-构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-构建镜像"}},[s._v("#")]),s._v(" STEP 2 构建镜像")]),s._v(" "),e("p",[s._v("关于 Docker 的核心操作，其实算起来只有两个：构建镜像和启动容器。\n首先进入项目根目录下，打开终端，输入命令：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("docker build -t docify/blog "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("终端上可以看到镜像构建花费的时间，以及执行指令的过程等信息。这样就可以在 Docker Desktop 中看到构建好的镜像：\n"),e("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17d8696ee5874ab5b7737beba0e53c17~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image"}})]),s._v(" "),e("p",[e("strong",[s._v("docker build")]),s._v("命令后面的 -t 参数表示 tag 标签的意思，就是给镜像起了一个名字叫做 "),e("strong",[s._v("docify/blog")]),s._v("。")]),s._v(" "),e("p",[s._v("注意命令最后还有一个 .非常重要，这个 . 表示把当前目录下的文件及文件夹作为 Dockerfile 配置文件中的上下文。什么意思呢？Dockerfile 文件中所要做的事，其实就是把项目进行打包构建，但是项目是在本地环境下，并不在 Docker 的环境中，所以就需要这个 . 将当前的项目传输到 Docker 的环境中，也就是所谓的上下文中，这样才会在一开始的配置文件中出现了这么一句"),e("strong",[s._v("COPY . /var/web/")]),s._v("，这里的 . 实际就是构建镜像的时候，指定的当前目录下的内容。")]),s._v(" "),e("p",[s._v("一定要理解上下文的概念，这样才不会在构建的时候，找不到对应的构建目录。")]),s._v(" "),e("h4",{attrs:{id:"step-3-创建容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-创建容器"}},[s._v("#")]),s._v(" STEP 3 创建容器")]),s._v(" "),e("p",[s._v("接下来，可以选择点击上图中 RUN 的按钮来创建容器，也可以使用命令来创建容器。输入以下命令：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("docker run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 --name blog docify/blog\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("docker run命令则是根据已有的镜像来创建一个容器。")]),s._v(" "),e("p",[s._v("-d 参数表示后台运行容器。对于前端应用来说，是启用了 nginx 作为 web 服务器，nginx 是一直需要保持后台运行，而不是只启动一次就结束了，所以需要加上 -d 的参数。")]),s._v(" "),e("p",[s._v("一般来说，创建好容器以后，可能需要去访问容器中运行的项目，所以需要把容器中的端口对外暴露出来，这样才可以在宿主机上面访问前端应用，此时可以使用 -p 参数。这里就表示容器中的80端口暴露到了宿主机的80端口，就可以访问到前端应用了。")]),s._v(" "),e("p",[s._v("再往后 --name 很好理解，就是设置容器的名字。如果没有该参数，则 Docker 会自动生成一个名字。")]),s._v(" "),e("p",[s._v("最后的 docify/blog 表示上一步中镜像的名字，也就是容器是基于镜像来创建的，这个参数也是一个必不可少的参数。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13dd32cc0ad4422992acd8e4f9dc1990~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image"}})]),s._v(" "),e("p",[s._v("打开浏览器，输入地址localhost（nginx 配置文件是默认本地的地址），可以看到部署好的应用。")]),s._v(" "),e("h3",{attrs:{id:"docker-镜像的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像的优化"}},[s._v("#")]),s._v(" Docker 镜像的优化")]),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("注意构建镜像花费的时间，1400多秒，随着项目体积的日益增长，这个时间可能还会不停的增加，那么如何去优化镜像的构建时间呢？\n一个方法就是分开构建，下载的依赖作为一个单独的 Dockerfile，再以这个镜像作为基础镜像，去打包项目源码。这么做可以不需要每次构建镜像的时候，都 install 一下，只需要打包的时间就可以。缺点也很明显，就是如果依赖发生了改变，就需要优先更新依赖包的镜像，然后再进行 build 打包工作。\n另外一个方法就是上面提到的多阶段构建，虽然第一次构建的时间比较长，但是好处就是，构建阶段是会存在缓存，二次构建的时候，时间也会大大缩短：")]),s._v(" "),e("p",[s._v("此时构建时间只需要80多秒了。如果需要跳过缓存来构建镜像，可以添加 --no-cache 的参数：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("docker build -t docify/blog "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" --no-cache\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("针对上面的多阶段构建，还可以进一步优化，就是将下载依赖和打包的动作分离开，这样就结合了上面的依赖基础镜像的优点，保证了依赖不变的时候，继续使用缓存，也可以缩小构建镜像的时间。完整的配置如下：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("FROM node:16-buster-slim as dependency\n\nLABEL "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("description")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A Dockerfile for build UnreWeb."')]),s._v("\n\nCOPY "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" /var/web/\n\nWORKDIR /var/web\n\nRUN "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -x "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n\nFROM node:16-buster-slim as builder\n\nCOPY --from"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /var/web /var/web\n\nWORKDIR /var/web\n\nRUN "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -x "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" run build:demo\n\nFROM nginx:1.23.1-alpine as prod\n\nEXPOSE "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n\nCOPY --from"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" /var/web/build /usr/share/nginx/html\n\nCMD "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-g"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"daemon off;"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("h3",{attrs:{id:"挂载点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挂载点"}},[s._v("#")]),s._v(" 挂载点")]),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("docker提供了挂载点，可以让容器访问我们本机的文件系统。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7672002fb34400495434e2df521b47d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3780:0:0:0.awebp",alt:"image"}})]),s._v(" "),e("p",[s._v("只需要在我们的项目中启动容器时指定-v 参数就行，即")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("docker run -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${pwd}")]),s._v(':/demo"')]),s._v(" -it frontend-dev /bin/bash\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("你会发现我们的frontend-dev镜像启动的容器中多了/demo目录，而且进去里面可以看到就是我们的项目。")]),s._v(" "),e("p",[s._v("然后在/demo目录中执行项目启动命令npm run start，我们的项目就运行起来了。")]),s._v(" "),e("p",[s._v("引用：")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7157662419681017870",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文档1"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6932808129189150734",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文档2"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7139724794672447518#heading-18",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文档3"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=t.exports}}]);